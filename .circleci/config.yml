version: 2.1


parameters:
  poetry_version:
    type: string
    default: 1.4.2

  python_version:
    type: string
    default: 3.9.14

  # https://circleci.com/docs/using-macos/#supported-xcode-versions-silicon
  # https://circleci.com/docs/using-macos/#supported-xcode-versions-intel
  macos_xcode_version:
    type: string
    default: 14.2.0


executors:
  linux:
    docker:
      - image: python:<< pipeline.parameters.python_version >>
  mac: # todo: m1 na płatnym?
    macos:
      xcode: << pipeline.parameters.macos_xcode_version >>


commands:
  install_python_and_gmp_mac:
    description: "Install specified python and poetry versions on mac executor"
    steps:
      - restore_cache:
          keys:
            - mac-python-gmp-<< pipeline.parameters.python_version >>-debugmariusz
      - run:
          name: Install python and gmp
          command: |
            env PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install -s << pipeline.parameters.python_version >>
            #pyenv install -s $(echo << pipeline.parameters.python_version >> | awk 'BEGIN{FS=OFS="."} NF--')-dev
            pyenv global << pipeline.parameters.python_version >>
            HOMEBREW_NO_AUTO_UPDATE=1 brew install gmp
      - save_cache:
          key: mac-python-gmp-<< pipeline.parameters.python_version >>-debugmariusz
          paths:
          - ~/.pyenv/versions/<< pipeline.parameters.python_version >>
          - /opt/homebrew/opt/gmp

  ensure_poetry_version:
    description: "Install poetry"
    steps:
      - run:
          name: Install required poetry version
          command: |
            if ! poetry --version &> /dev/null || [[ $(poetry --version | awk '{print $NF}') != << pipeline.parameters.poetry_version >> ]]; then 
              echo "Poetry in wrong version, installing"
              pip3 install poetry==<< pipeline.parameters.poetry_version >>
            fi

  install_packages:
    description: "Install packages from lock file"
    parameters:
      platform:
        type: enum
        enum: ['linux', 'mac']
    steps:
      - run:
          name: Install packages
          command: |
            poetry config installer.modern-installation false
            if [[ << parameters.platform >> == "mac" ]]; then
              # https://github.com/python-poetry/poetry/issues/7184
              CFLAGS=-I/opt/homebrew/opt/gmp/include LDFLAGS=-L/opt/homebrew/opt/gmp/lib poetry --no-ansi install
            else
              poetry --no-ansi install
            fi

  checkout_with_submodules:
    description: "Checkout code with submodules"
    steps:
      - checkout
      - run:
          name: Checkout code submodules
          command: |
            git submodule sync
            git submodule update --init

  install_rust:
    description: "Install rust"
    steps:
      - run:
          name: Install rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$BASH_ENV"
            source "$BASH_ENV"

  cairo_bindings_and_compiler:
    description: "Install cairo bindings"
    parameters:
      platform:
        default: linux
        type: enum
        enum: ['linux', 'mac']
    steps:
      - run:
          name: Get submodule hash
          command: git rev-parse HEAD:./cairo > /tmp/cairo-submodule-hash
      - restore_cache:
          key: bindings-<< parameters.platform >>-{{ checksum "scripts/install_cairo_bindings.sh" }}-{{ checksum "/tmp/cairo-submodule-hash" }}-debugmariusz
      - run:
          name: Install bindings and compile cairo-compile
          command: |
            # if [ -f ./cairo/target/debug/cairo-compile ] && [ -d ./cairo/target/wheels ]; then
            #   pip install $(find ./cairo/target/wheels -maxdepth 1 -type f -iname "cairo_python_bindings*")
            # else
            poetry run poe install_cairo_bindings prod
            poetry run poe install_cairo_bindings # debug
            pushd cairo
            rustup override set nightly-2022-11-03
            cargo build --bin cairo-compile
            popd
            # fi
      - save_cache:
          key: bindings-<< parameters.platform >>-{{ checksum "scripts/install_cairo_bindings.sh" }}-{{ checksum "/tmp/cairo-submodule-hash" }}-debugmariusz
          paths:
            - ./cairo/target/debug/cairo-compile
            - ./cairo/target/wheels
      - patch_cairo_compiler

  setup:
    description: "A command to set up poetry, install deps and cairo bindings"
    parameters:
      platform:
        default: linux
        type: enum
        enum: ['linux', 'mac']
    steps:
      - when:
          condition:
            equal: ['mac', << parameters.platform >>]
          steps:
            - install_python_and_gmp_mac
      - ensure_poetry_version
      - install_rust
      - checkout_with_submodules
      - restore_poetry_cache:
          platform: << parameters.platform >>
      - install_packages:
          platform: << parameters.platform >>
      - cairo_bindings_and_compiler:
          platform: << parameters.platform >>
      - save_poetry_cache:
          platform: << parameters.platform >>
      # - run:
      #     command: |
      #       echo "DEBUG"
      #       pip freeze
      #       echo "poetry show"
      #       poetry show
      # - run:
      #     command: poetry run poe install_cairo_bindings prod # debug
      # - run:
      #     command: |
      #       echo "DEBUG"
      #       pip freeze
      #       echo "poetry show"
      #       poetry show

  restore_poetry_cache:
    parameters:
      platform:
        type: enum
        enum: ['linux', 'mac']
    steps:
      - restore_cache:
          key: poetry-<< pipeline.parameters.poetry_version >>-py<< pipeline.parameters.python_version >>-<< parameters.platform >>-{{ checksum "poetry.lock" }}

  save_poetry_cache:
    parameters:
      platform:
        type: enum
        enum: ['linux', 'mac']
    steps:
      - save_cache:
          key: poetry-<< pipeline.parameters.poetry_version >>-py<< pipeline.parameters.python_version >>-<< parameters.platform >>-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/pypoetry

  patch_cairo_compiler:
    description: "Replace cairo_lang cairo compiler"
    steps:
      - run:
          name: Replace cairo_lang compiler
          command: |
            PY_VER=$(echo << pipeline.parameters.python_version >> | awk 'BEGIN{FS=OFS="."} NF--')
            cp cairo/target/debug/cairo-compile $(poetry env info -p)/lib/python$PY_VER/site-packages/starkware/starknet/compiler/v1/bin/starknet-sierra-compile
            chmod +x $(poetry env info -p)/lib/python$PY_VER/site-packages/starkware/starknet/compiler/v1/bin/starknet-sierra-compile

  lint:
    description: "Type checks, formatting and linting"
    steps:
      - run:
          name: Run type check
          command: poetry run poe type_check
      - run: 
          name: Run Format check
          command: poetry run poe format_check
      - run:
          name: Run linter
          command: poetry run poe lint

  run_unit_tests:
    description: "Run unit tests"
    steps:
      - run:
          command: poetry run pytest -n4 protostar/*

  run_integration_tests:
    description: "Run integration tests"
    steps:
      - run:
          command: |
            TESTS=$(circleci tests glob "tests/integration/**/*.py" | circleci tests split --split-by=timings)
            # auto OR $(getconf _NPROCESSORS_ONLN) does not return physical cpus in docker
            # so the number is inflated and tests fail; hence fixed number of cpus
            poetry run pytest -n4 --random-order scripts $TESTS # fail fastuj, jeśli jeden test się sypie to od razu możnaby przerwac wykonanie

  run_e2e_tests:
    description: "Run unit tests"
    steps:
      - run:
          command: poetry run poe build
      - run:
          command: poetry run pytest -n4 tests/e2e

jobs:

  code_quality:
    executor: linux
    steps:
      - setup
      - lint

  unit_tests:
    parameters:
      platform:
        type: enum
        enum: ['linux', 'mac']
    executor: << parameters.platform >>
    #parallelism: 4
    steps:
      - setup:
          platform: << parameters.platform >>
      - run:
          command: git config --global protocol.file.allow always
      - run_unit_tests
      - run_integration_tests

  e2e_tests:
    parameters:
      platform:
        type: enum
        enum: ['linux', 'mac']
    executor: << parameters.platform >>
    #parallelism: 4
    steps:
      - setup:
          platform: << parameters.platform >>
      - run:
          command: git config --global protocol.file.allow always
      - run_e2e_tests

workflows:
  version: 2

  protostar:
    jobs:
      - code_quality
      - unit_tests:
          matrix:
            parameters:
              platform: [linux, mac]
      - e2e_tests:
          matrix:
            parameters:
              platform: [linux, mac]
      # - build_linux: # i verify jako ostatni step jobów buildowych
      #     requires:
      #       - checks
      # - build_mac: # i verify jako ostatni step jobów buildowych
      #     requires:
      #       - checks
      # - publish_approval:
      #     type: approval
      #     requires:
      #       - build_linux
      #       - build_mac
      # - publish:
      #     requires:
      #       - build_linux
      #       - build_mac
      #     filters:
      #       branches:
      #         only:
      #           - master

# test releases z branchów, tylko gdzie je wrzucać? circleci artifacts?